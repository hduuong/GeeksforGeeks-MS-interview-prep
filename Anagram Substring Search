Anagram Substring Search (Or Search for all permutations)
Given a text txt[0..n-1] and a pattern pat[0..m-1], 
write a function search(char pat[], char txt[]) that prints all occurrences of pat[] and its permutations (or anagrams) in txt[]. 
You may assume that n > m. 

Expected time complexity is O(n)

Examples:

1) Input:  txt[] = "BACDGABCDA"  pat[] = "ABCD"
   Output:   Found at Index 0
             Found at Index 5
             Found at Index 6
2) Input: txt[] =  "AAABABAA" pat[] = "AABA"
   Output:   Found at Index 0
             Found at Index 1
             Found at Index 4
             

public void search(String pat, String txt) {
    int n = txt.length();
    int m = pat.length();
    
    int[] patMap = new int[256];
    int[] txtMap = new int[256];
    
    for (int i = 0; i < m; i++) {
        patMap[pat.charAt(i)]++;
        txtMap[txt.charAt(i)]++;
    }
    
    for (int i = m; i < n; i++) {
        if (isMatch(patMap, txtMap)) System.out.println(i-m);
        txtMap[txt.charAt(i)]++;
        txtMap[txt.charAt(i-m)]--;
    }
    if (isMatch(patMap,txtMap)) System.out.println(n-m);
}

private boolean isMatch(int[] a, int[] b) {
    for (int i = 0; i < a.length; i++) {
        if (a[i] != b[i]) return false;
    }
    return true;
}
