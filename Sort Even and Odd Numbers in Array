Given an array of integers (both odd and even), sort them in such a way that the first part of the array contains odd numbers sorted in descending order, rest portion contains even numbers sorted in ascending order.

Examples:

Input  : arr[] = {1, 2, 3, 5, 4, 7, 10}
Output : arr[] = {7, 5, 3, 1, 2, 4, 10}

Input  : arr[] = {0, 4, 5, 3, 7, 2, 1}
Output : arr[] = {7, 5, 3, 1, 0, 2, 4} 
Asked in : Microsoft

public void twoWaySort(int[] array) {
    int l = 0, r = array.length - 1;
    int oddCount = 0;
    while (l <  r) {
        while (array[l]%2 != 0) {
            l++;
            oddCount++;
        }
        while (array[r]%2 == 0) {
            r--;
        }
        if (l < r) swap(array, l, r);
    }
    
    Arrays.sort(array, 0, oddCount, Collections.reverseOrder());
    Arrays.sort(array, oddCount, array.length);
}

private void swap(int[] array, int i, int j) {
    if (i != j) {
        array[i] ^= array[j];
        array[j] ^= array[i];
        array[i] ^= array[j];
    }
}
